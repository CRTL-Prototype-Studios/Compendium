generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gallery {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contents  Content[]
  name      String
  desc      String?
}

model Content {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  desc         String?
  ctype        ContentType @default(image)
  media        Media       @relation(fields: [mediaId], references: [id])
  mediaId      Int
  gallery      Gallery?    @relation(fields: [galleryId], references: [id])
  galleryId    Int?
  aperture     String?
  shutterspeed String?
  iso          String?
  camera       Camera      @relation(fields: [cameraId], references: [id])
  cameraId     Int
  lens         Lens        @relation(fields: [lensId], references: [id])
  lensId       Int
}

model Camera {
  id      Int       @id @default(autoincrement())
  name    String
  Content Content[]
}

model Lens {
  id           Int       @id @default(autoincrement())
  focal_length String?
  name         String
  Content      Content[]
}

enum ContentType {
  image
  video
  audio

  @@map("Content Type")
}

model Media {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  fileName        String
  url             String
  directory       String
  pseudoDirectory String    @default("/")
  isFolder        Boolean   @default(false)
  Content         Content[]
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  uuid   String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  username String
  password String
  aboutMe  String
  tokens   Token[]
}
